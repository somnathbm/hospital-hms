// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/opd.proto

package opdpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OPDService_CheckAppointment_FullMethodName     = "/opd.OPDService/CheckAppointment"
	OPDService_StartConsultation_FullMethodName    = "/opd.OPDService/StartConsultation"
	OPDService_RecordDiagnosis_FullMethodName      = "/opd.OPDService/RecordDiagnosis"
	OPDService_PrescribeTests_FullMethodName       = "/opd.OPDService/PrescribeTests"
	OPDService_GeneratePrescription_FullMethodName = "/opd.OPDService/GeneratePrescription"
	OPDService_EndVisit_FullMethodName             = "/opd.OPDService/EndVisit"
)

// OPDServiceClient is the client API for OPDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OPDServiceClient interface {
	CheckAppointment(ctx context.Context, in *CheckAppointmentRequest, opts ...grpc.CallOption) (*CheckAppointmentResponse, error)
	StartConsultation(ctx context.Context, in *StartConsultationRequest, opts ...grpc.CallOption) (*StartConsultationResponse, error)
	RecordDiagnosis(ctx context.Context, in *RecordDiagnosisRequest, opts ...grpc.CallOption) (*RecordDiagnosisResponse, error)
	PrescribeTests(ctx context.Context, in *PrescribeTestsRequest, opts ...grpc.CallOption) (*PrescribeTestsResponse, error)
	GeneratePrescription(ctx context.Context, in *GeneratePrescriptionRequest, opts ...grpc.CallOption) (*GeneratePrescriptionResponse, error)
	EndVisit(ctx context.Context, in *EndVisitRequest, opts ...grpc.CallOption) (*EndVisitResponse, error)
}

type oPDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOPDServiceClient(cc grpc.ClientConnInterface) OPDServiceClient {
	return &oPDServiceClient{cc}
}

func (c *oPDServiceClient) CheckAppointment(ctx context.Context, in *CheckAppointmentRequest, opts ...grpc.CallOption) (*CheckAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAppointmentResponse)
	err := c.cc.Invoke(ctx, OPDService_CheckAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oPDServiceClient) StartConsultation(ctx context.Context, in *StartConsultationRequest, opts ...grpc.CallOption) (*StartConsultationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartConsultationResponse)
	err := c.cc.Invoke(ctx, OPDService_StartConsultation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oPDServiceClient) RecordDiagnosis(ctx context.Context, in *RecordDiagnosisRequest, opts ...grpc.CallOption) (*RecordDiagnosisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordDiagnosisResponse)
	err := c.cc.Invoke(ctx, OPDService_RecordDiagnosis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oPDServiceClient) PrescribeTests(ctx context.Context, in *PrescribeTestsRequest, opts ...grpc.CallOption) (*PrescribeTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrescribeTestsResponse)
	err := c.cc.Invoke(ctx, OPDService_PrescribeTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oPDServiceClient) GeneratePrescription(ctx context.Context, in *GeneratePrescriptionRequest, opts ...grpc.CallOption) (*GeneratePrescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneratePrescriptionResponse)
	err := c.cc.Invoke(ctx, OPDService_GeneratePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oPDServiceClient) EndVisit(ctx context.Context, in *EndVisitRequest, opts ...grpc.CallOption) (*EndVisitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndVisitResponse)
	err := c.cc.Invoke(ctx, OPDService_EndVisit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OPDServiceServer is the server API for OPDService service.
// All implementations must embed UnimplementedOPDServiceServer
// for forward compatibility.
type OPDServiceServer interface {
	CheckAppointment(context.Context, *CheckAppointmentRequest) (*CheckAppointmentResponse, error)
	StartConsultation(context.Context, *StartConsultationRequest) (*StartConsultationResponse, error)
	RecordDiagnosis(context.Context, *RecordDiagnosisRequest) (*RecordDiagnosisResponse, error)
	PrescribeTests(context.Context, *PrescribeTestsRequest) (*PrescribeTestsResponse, error)
	GeneratePrescription(context.Context, *GeneratePrescriptionRequest) (*GeneratePrescriptionResponse, error)
	EndVisit(context.Context, *EndVisitRequest) (*EndVisitResponse, error)
	mustEmbedUnimplementedOPDServiceServer()
}

// UnimplementedOPDServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOPDServiceServer struct{}

func (UnimplementedOPDServiceServer) CheckAppointment(context.Context, *CheckAppointmentRequest) (*CheckAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAppointment not implemented")
}
func (UnimplementedOPDServiceServer) StartConsultation(context.Context, *StartConsultationRequest) (*StartConsultationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConsultation not implemented")
}
func (UnimplementedOPDServiceServer) RecordDiagnosis(context.Context, *RecordDiagnosisRequest) (*RecordDiagnosisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordDiagnosis not implemented")
}
func (UnimplementedOPDServiceServer) PrescribeTests(context.Context, *PrescribeTestsRequest) (*PrescribeTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrescribeTests not implemented")
}
func (UnimplementedOPDServiceServer) GeneratePrescription(context.Context, *GeneratePrescriptionRequest) (*GeneratePrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePrescription not implemented")
}
func (UnimplementedOPDServiceServer) EndVisit(context.Context, *EndVisitRequest) (*EndVisitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndVisit not implemented")
}
func (UnimplementedOPDServiceServer) mustEmbedUnimplementedOPDServiceServer() {}
func (UnimplementedOPDServiceServer) testEmbeddedByValue()                    {}

// UnsafeOPDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OPDServiceServer will
// result in compilation errors.
type UnsafeOPDServiceServer interface {
	mustEmbedUnimplementedOPDServiceServer()
}

func RegisterOPDServiceServer(s grpc.ServiceRegistrar, srv OPDServiceServer) {
	// If the following call pancis, it indicates UnimplementedOPDServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OPDService_ServiceDesc, srv)
}

func _OPDService_CheckAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OPDServiceServer).CheckAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OPDService_CheckAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OPDServiceServer).CheckAppointment(ctx, req.(*CheckAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OPDService_StartConsultation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartConsultationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OPDServiceServer).StartConsultation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OPDService_StartConsultation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OPDServiceServer).StartConsultation(ctx, req.(*StartConsultationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OPDService_RecordDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordDiagnosisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OPDServiceServer).RecordDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OPDService_RecordDiagnosis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OPDServiceServer).RecordDiagnosis(ctx, req.(*RecordDiagnosisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OPDService_PrescribeTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrescribeTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OPDServiceServer).PrescribeTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OPDService_PrescribeTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OPDServiceServer).PrescribeTests(ctx, req.(*PrescribeTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OPDService_GeneratePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OPDServiceServer).GeneratePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OPDService_GeneratePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OPDServiceServer).GeneratePrescription(ctx, req.(*GeneratePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OPDService_EndVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OPDServiceServer).EndVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OPDService_EndVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OPDServiceServer).EndVisit(ctx, req.(*EndVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OPDService_ServiceDesc is the grpc.ServiceDesc for OPDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OPDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opd.OPDService",
	HandlerType: (*OPDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAppointment",
			Handler:    _OPDService_CheckAppointment_Handler,
		},
		{
			MethodName: "StartConsultation",
			Handler:    _OPDService_StartConsultation_Handler,
		},
		{
			MethodName: "RecordDiagnosis",
			Handler:    _OPDService_RecordDiagnosis_Handler,
		},
		{
			MethodName: "PrescribeTests",
			Handler:    _OPDService_PrescribeTests_Handler,
		},
		{
			MethodName: "GeneratePrescription",
			Handler:    _OPDService_GeneratePrescription_Handler,
		},
		{
			MethodName: "EndVisit",
			Handler:    _OPDService_EndVisit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/opd.proto",
}
